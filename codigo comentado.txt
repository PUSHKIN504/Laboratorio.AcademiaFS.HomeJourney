DOMAIN SERVICE CLUSTERING        
//private readonly HttpClient _httpClient;
        //private readonly string _googleApiKey;
        //private readonly Random _random = new Random();

        //public DomainServiceClustering(HttpClient httpClient, IConfiguration configuration)
        //{
        //    _httpClient = httpClient;
        //    _googleApiKey = configuration["GoogleApiKey:ApiKey"];
        //}

        //public async Task<List<List<ViajesdetallesCreateClusteredDto>>> ClusterEmployeesAsync(
        //    List<ViajesdetallesCreateClusteredDto> employees, decimal umbraldistancia, string origin)
        //{
        //    if (employees == null || !employees.Any())
        //        throw new ArgumentException("Employee list cannot be null or empty.");
        //    if (umbraldistancia <= 0)
        //        throw new ArgumentException("Distance threshold must be positive.");
        //    if (string.IsNullOrEmpty(origin))
        //        throw new ArgumentException("Origin address or coordinates must be provided.");

        //    var distances = await GetRealDistancesAsync(employees, origin);
        //    int k = Math.Max(1, (int)Math.Ceiling((distances.Max() - distances.Min()) / (double)umbraldistancia));
        //    var clusterAssignments = KMeansCluster(distances, k);

        //    var clusteredEmployees = new List<List<ViajesdetallesCreateClusteredDto>>();
        //    for (int i = 0; i < k; i++)
        //    {
        //        var cluster = employees
        //            .Where((e, idx) => clusterAssignments[idx] == i)
        //            .ToList();
        //        if (cluster.Any())
        //            clusteredEmployees.Add(cluster);
        //    }

        //    return clusteredEmployees;
        //}

        //public List<Viajes> CreateTripsFromClusters(
        //    ViajesCreateClusteredDto tripDto, List<List<ViajesdetallesCreateClusteredDto>> clusteredEmployees)
        //{
        //    if (tripDto == null)
        //        throw new ArgumentNullException(nameof(tripDto));
        //    if (tripDto.SucursalId <= 0 || tripDto.EstadoId <= 0)
        //        throw new ArgumentException("SucursalId and EstadoId must be positive.");
        //    if (clusteredEmployees == null || !clusteredEmployees.Any())
        //        throw new ArgumentException("Clustered employees cannot be null or empty.");
        //    if (tripDto.TransportistaIds == null || tripDto.TransportistaIds.Count < clusteredEmployees.Count)
        //        throw new ArgumentException("The number of transportistas must match or exceed the number of clusters.");

        //    var trips = new List<Viajes>();
        //    var availableTransportistas = new List<int>(tripDto.TransportistaIds);

        //    foreach (var cluster in clusteredEmployees)
        //    {
        //        var tripDetails = cluster.Select(d => new Viajesdetalles
        //        {
        //            ColaboradorId = d.ColaboradorId,
        //            Distanciakilometros = d.Distanciakilometros,
        //            Totalpagar = d.Totalpagar,
        //            ColaboradorsucursalId = d.ColaboradorsucursalId,
        //            Activo = true,
        //            Usuariocrea = tripDto.Usuariocrea,
        //            Fechacrea = DateTime.Now,
        //            MonedaId = d.MonedaId
        //        }).ToList();

        //        int randomIndex = _random.Next(0, availableTransportistas.Count);
        //        int selectedTransportistaId = availableTransportistas[randomIndex];
        //        availableTransportistas.RemoveAt(randomIndex);

        //        var trip = new Viajes
        //        {
        //            SucursalId = tripDto.SucursalId,
        //            TransportistaId = selectedTransportistaId,
        //            EstadoId = tripDto.EstadoId,
        //            Viajehora = tripDto.Viajehora,
        //            Viajefecha = tripDto.Viajefecha,
        //            Totalkilometros = tripDetails.Sum(d => d.Distanciakilometros),
        //            Totalpagar = tripDetails.Sum(d => d.Totalpagar),
        //            Activo = true,
        //            Usuariocrea = tripDto.Usuariocrea,
        //            Fechacrea = DateTime.Now,
        //            MonedaId = tripDto.MonedaId,
        //            Viajesdetalles = tripDetails
        //        };

        //        trips.Add(trip);
        //    }

        //    return trips;
        //}

        //private async Task<List<double>> GetRealDistancesAsync(List<ViajesdetallesCreateClusteredDto> employees, string origin)
        //{
        //    var destinations = employees.Select(e => $"{e.Latitud},{e.Longitud}").ToList();
        //    var url = $"https://maps.googleapis.com/maps/api/distancematrix/json" +
        //              $"?origins={Uri.EscapeDataString(origin)}" +
        //              $"&destinations={Uri.EscapeDataString(string.Join("|", destinations))}" +
        //              $"&units=metric&key={_googleApiKey}";

        //    var response = await _httpClient.GetAsync(url);
        //    response.EnsureSuccessStatusCode();

        //    var json = await response.Content.ReadAsStringAsync();
        //    var result = JsonSerializer.Deserialize<DistanceMatrixResponse>(json, new JsonSerializerOptions
        //    {
        //        PropertyNameCaseInsensitive = true
        //    });

        //    if (result.Status != "OK")
        //        throw new Exception($"Google API error: {result.Status}");

        //    return result.Rows[0].Elements
        //        .Select(e => e.Status == "OK" ? e.Distance.Value / 1000.0 : double.MaxValue)
        //        .ToList();
        //}

        //private List<int> KMeansCluster(List<double> data, int k)
        //{
        //    if (data.Count < k) return Enumerable.Range(0, data.Count).ToList();

        //    var random = new Random();
        //    var centroids = data.OrderBy(x => random.Next()).Take(k).ToList();
        //    var assignments = new List<int>(new int[data.Count]);
        //    bool changed;

        //    do
        //    {
        //        changed = false;
        //        for (int i = 0; i < data.Count; i++)
        //        {
        //            int nearestCentroid = 0;
        //            double minDistance = Math.Abs(data[i] - centroids[0]);
        //            for (int j = 1; j < k; j++)
        //            {
        //                double distance = Math.Abs(data[i] - centroids[j]);
        //                if (distance < minDistance)
        //                {
        //                    minDistance = distance;
        //                    nearestCentroid = j;
        //                }
        //            }
        //            if (assignments[i] != nearestCentroid)
        //            {
        //                assignments[i] = nearestCentroid;
        //                changed = true;
        //            }
        //        }
        //        for (int j = 0; j < k; j++)
        //        {
        //            var clusterPoints = data.Where((_, idx) => assignments[idx] == j).ToList();
        //            if (clusterPoints.Count > 0)
        //                centroids[j] = clusterPoints.Average();
        //        }
        //    } while (changed);

        //    return assignments;
        //}

CONTROLLER VIAJE CLUSTERED

        //[HttpPost("cluster-employees")]
        //public async Task<IActionResult> ClusterEmployees(
        //    [FromBody] List<ViajesdetallesCreateClusteredDto> employees,
        //    [FromQuery] decimal umbraldistancia,
        //    [FromQuery] string origin)
        //{
        //    try
        //    {
        //        var clusteredEmployees = await _tripService.ClusterEmployeesAsync(employees, umbraldistancia, origin);
        //        return Ok(clusteredEmployees.Select((cluster, index) => new
        //        {
        //            ClusterId = index,
        //            Employees = cluster.Select(e => new { e.ColaboradorId, e.Distanciakilometros, e.Latitud, e.Longitud })
        //        }));
        //    }
        //    catch (ArgumentException ex)
        //    {
        //        return BadRequest(ex.Message);
        //    }
        //    catch (Exception ex)
        //    {
        //        return StatusCode(500, $"An error occurred: {ex.Message}");
        //    }
        //}

        //[HttpPost("create-trips-from-clusters")]
        //public async Task<IActionResult> CreateTripsFromClusters(
        //    [FromBody] CreateViajesRequest request)
        //{
        //    try
        //    {
        //        var trips = await _tripService.CreateTripsFromClustersAsync(request.viajeclusteredDto, request.empleadosclusteredDto);
        //        return Ok(trips.Select(t => new
        //        {
        //            t.ViajeId,
        //            t.SucursalId,
        //            t.TransportistaId,
        //            t.EstadoId,
        //            t.Viajehora,
        //            t.Viajefecha,
        //            t.Totalkilometros,
        //            t.Totalpagar,
        //            DetailsCount = t.Viajesdetalles.Count
        //        }));
        //    }
        //    catch (ArgumentException ex)
        //    {
        //        return BadRequest(ex.Message);
        //    }
        //    catch (Exception ex)
        //    {
        //        return StatusCode(500, $"An error occurred: {ex.Message}");
        //    }
        //}

        //[HttpPost("cluster-employees")]
        //public async Task<IActionResult> ClusterEmployees(
        //    [FromBody] List<ViajesdetallesCreateClusteredDto> employees,
        //    [FromQuery] decimal distanceThreshold)
        //{
        //    //try
        //    //{
        //    //    var clustered = await _tripService.ClusterEmployeesAsync(employees, distanceThreshold);
        //    //    return Ok(clustered.Select((c, i) => new
        //    //    {
        //    //        ClusterId = i,
        //    //        Employees = c.Select(e => new { e.ColaboradorId, e.Distanciakilometros, e.Latitud, e.Longitud })
        //    //    }));
        //    //}
        //    //catch (ArgumentException ex) { return BadRequest(ex.Message); }
        //    //catch (Exception ex) { return StatusCode(500, $"Error: {ex.Message}"); }
        //    try
        //    {
        //        var clustered = await _tripService.ClusterEmployeesAsync(employees, distanceThreshold);
        //        // Devolver directamente la lista de listas sin proyección adicional
        //        return Ok(clustered);
        //    }
        //    catch (ArgumentException ex) { return BadRequest(ex.Message); }
        //    catch (Exception ex) { return StatusCode(500, $"Error: {ex.Message}"); }
        //}

        //[HttpPost("create-trips-from-clusters")]
        //public async Task<IActionResult> CreateTripsFromClusters(ViajesCreateClusteredDto tripDto, List<List<ViajesdetallesCreateClusteredDto>> clusteredEmployees)
        //{
        //    try
        //    {
        //        //var trips = await _tripService.CreateTripsFromClustersAsync(request.viajeclusteredDto, request.empleadosclusteredDto);
        //        var trips = _tripService.CreateTripsFromClustersAsync(tripDto, clusteredEmployees);
        //        return Ok(trips.Select(t => new
        //        {
        //            t.ViajeId,
        //            t.SucursalId,
        //            t.TransportistaId,
        //            t.EstadoId,
        //            t.Viajehora,
        //            t.Viajefecha,
        //            t.Totalkilometros,
        //            t.Totalpagar,
        //            DetailsCount = t.Viajesdetalles.Count
        //        }));
        //    }
        //    catch (ArgumentException ex) { return BadRequest(ex.Message); }
        //    catch (Exception ex) { return StatusCode(500, $"Error: {ex.Message}"); }
        //}
        //[HttpPost("create-trips-from-clusters")]
        //public async Task<IActionResult> CreateTripsFromClusters([FromBody] CreateViajesRequest request)
        //{
        //    try
        //    {
        //        var trips = await _tripService.CreateTripsFromClustersAsync(request.viajeclusteredDto, request.empleadosclusteredDto);
        //        return Ok(trips.Select(t => new
        //        {
        //            t.ViajeId,
        //            t.SucursalId,
        //            t.TransportistaId,
        //            t.EstadoId,
        //            t.Viajehora,
        //            t.Viajefecha,
        //            t.Totalkilometros,
        //            t.Totalpagar,
        //            DetailsCount = t.Viajesdetalles.Count
        //        }));
        //    }
        //    catch (ArgumentException ex) { return BadRequest(ex.Message); }
        //    catch (Exception ex) { return StatusCode(500, $"Error: {ex.Message}"); }
        //}

VIAJE SERVICE
        //private readonly TripClusteringDomainService _clusteringService;

        //public ViajesService(DomainServiceClustering clusteringService
        //    //, TripClusteringDomainService clusteringService
        //    )
        //{
        //    //_tripRepository = tripRepository;
        //    _clusteringService = clusteringService;
        //}
        //public async Task<List<List<ViajesdetallesCreateClusteredDto>>> ClusterEmployeesAsync(
        //    List<ViajesdetallesCreateClusteredDto> employees, decimal umbraldistancia, string origin)
        //{
        //    return await _clusteringService.ClusterEmployeesAsync(employees, umbraldistancia, origin);
        //}

        //public async Task<List<Viajes>> CreateTripsFromClustersAsync(
        //    ViajesCreateClusteredDto tripDto, List<List<ViajesdetallesCreateClusteredDto>> clusteredEmployees)
        //{
        //    var trips = _clusteringService.CreateTripsFromClusters(tripDto, clusteredEmployees);
        //    await _unitOfWork.AddRangeAsync(trips);
        //    return trips;
        //}
        //public async Task<List<Viajes>> CreateTripsFromClustersAsync(
        //    ViajesCreateClusteredDto tripDto, List<List<ViajesdetallesCreateClusteredDto>> clusteredEmployees)
        //{
        //    var trips = _clusteringService.CreateTripsFromClusters(tripDto, clusteredEmployees);
        //     _unitOfWork.Save();
        //    return trips;
        //}
